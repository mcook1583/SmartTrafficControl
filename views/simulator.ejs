<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Smart Traffic Control Game</title>
<style type="text/css">
<!--
html {
	height: 100%
}
#map-canvas {
	 height: 100%; 
	 width: 80%;
}
body {
	background-color: #000000;	
	height: 100%; 
	margin: 0; 
	padding: 0;
}
#goButton {
  position: absolute;
  bottom: 0;
  left: 0;
	font-family: Geneva, Arial, Helvetica, sans-serif;
	color: #CCCCCC;
	background-color: #999999;
	width: 100%;
	border-radius: 50px;
	font-weight: bold;
	margin-top: 50px;
}
.sidebar {
	background-color: #CCCCCC;
	height: 100%;
	overflow: auto;
	position: relative;
}
.style7 {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	color: #999999;
	text-align: center;
	font-weight: bold;
	margin-top: 50px;
}
-->
</style>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAd7lDXsyY13jO9zRM5AiLWCbhqbrf5XCY"></script>
<script type="text/javascript">
    var southampton = new google.maps.LatLng(50.924354,-1.405391);
	var map;
	var M;
	var jams = [];
	var cars = [];
	var radius = [];
	var fakeJamCount = 0;
	var timeGone;
	var timer;
	var score;
	var round;
	var allAssigned;
	var splashPanel;
	var jamJSON;
	var carJSON;
	var MComboBox;
	var sof;
	var grey = true;
	var directionsService = new google.maps.DirectionsService();
	var reals = [[new google.maps.LatLng(50.8967964,-1.4069385),
				new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9218287,-1.4686275),
				new google.maps.LatLng(50.9317153,-1.4475859),
				new google.maps.LatLng(50.9346772,-1.4352648),
				new google.maps.LatLng(50.9338139,-1.4182561),
				new google.maps.LatLng(50.9358996,-1.4067571),
				new google.maps.LatLng(50.9409782,-1.4067499),
				new google.maps.LatLng(50.9361462,-1.3775493),
				new google.maps.LatLng(50.9253711,-1.3841219),
				new google.maps.LatLng(50.9176422,-1.3834981),
				new google.maps.LatLng(50.9352312,-1.3522463),
				new google.maps.LatLng(50.9150376,-1.3611758),
				new google.maps.LatLng(50.8966838,-1.369583)],
				[new google.maps.LatLng(50.8967964,-1.4069385),
				new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9317153,-1.4475859),
				new google.maps.LatLng(50.9338139,-1.4182561),
				new google.maps.LatLng(50.9358996,-1.4067571),
				new google.maps.LatLng(50.9361462,-1.3775493),
				new google.maps.LatLng(50.9253711,-1.3841219),
				new google.maps.LatLng(50.9150376,-1.3611758)],
				[new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9338139,-1.4182561),
				new google.maps.LatLng(50.9361462,-1.3775493),
				new google.maps.LatLng(50.9346772,-1.4352648)],
				[new google.maps.LatLng(50.8985614,-1.3926258),
				new google.maps.LatLng(50.9149906,-1.4145485),
				new google.maps.LatLng(50.9338139,-1.4182561)],
				[]];
	
	function initialize(){
		map = new google.maps.Map(document.getElementById("map-canvas"),{
			center: southampton,
			zoom:13,
			disableDefaultUI:true,
			mapTypeId: google.maps.MapTypeId.ROADMAP
		});
		map.setOptions({disableDoubleClickZoom: true, zoomControl: false, scrollwheel:false, draggable: false});
		map.setClickableIcons(false);
		//add bounding black boxes
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 90,
				south: 50.9603811,
				east: 180,
				west: -180
			}
		});
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 50.8883491,
				south: -90,
				east: 180,
				west: -180
			}
		});
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 90,
				south: -90,
				east: 180,
				west: -1.3106925
			}
		});
		new google.maps.Rectangle({
			fillOpacity: 1.0,
			map: map,
			bounds: {
				north: 90,
				south: -90,
				east: -1.4981467,
				west: -180
			}
		});
			resetVariables();
			startRound(round);
			map.controls[google.maps.ControlPosition.CENTER].pop();
			map.setOptions({disableDoubleClickZoom: true, zoomControl: true, scrollwheel:true, draggable: true});	
			//enable part of the sidebar
			document.getElementById('score').style.color = '#000000';
			document.getElementById('goButton').style.color = '#FFFFFF';
			document.getElementById('goButton').style.backgroundColor = '#66FF33';	
			grey = false;
	}
	
	
	//Resets the variables that change game on game
	function resetVariables(){
		round = 0;
		score = 0;
	}
	
	//Adds everything to the map for a new round
	function startRound(round){
		document.getElementById('timeleft').style.color = '#999999';	
		document.getElementById('timeleft').innerHTML = '60 SECONDS LEFT';
		document.getElementById('checked').style.color = '#999999';	
		document.getElementById('checked').innerHTML = 'JAMS CHECKED:';
		document.getElementById('fakesleft').style.color = '#999999';	
		document.getElementById('fakesleft').innerHTML = 'FAKE JAMS LEFT TEST: ';
		document.getElementById('goButton').style.color = '#FFFFFF';
		document.getElementById('goButton').style.backgroundColor = '#66FF33';
		grey = false;
		if(round === 5){
			score = Math.round(score);
			alert("Score: " + score);
			resetVariables();
		}else{
			deleteJams();
			deleteCars();
			for(var i = 0; i<reals[round].length; i++){
				placeRealJam(reals[round][i]);
			}
			placeFakes();
		}
	}

	function placeFakes(){
		$.ajax({
			type: 'GET',
			url: 'https://smart-traffic-control-game.herokuapp.com/simulator-data?id=' + window.location.search.replace("?", ""),
			success: function(data){
						var jsonObj = $.parseJSON(JSON.stringify(data));
						var str = JSON.stringify(jsonObj[0].jams).replace(/\\"/g, "\"");
						var jsonObj2 = $.parseJSON('[' + jsonObj[0].jams + ']');
						M = jsonObj2.length / (jsonObj2[jsonObj2.length-1].round + 1);
						for(var q = 0; q<jsonObj2.length;q++){
							if(jsonObj2[q].round === round){
								placeFakeJam(new google.maps.LatLng(jsonObj2[q].lat,jsonObj2[q].lng));
							}		
						}
						var str = JSON.stringify(jsonObj[0].cars).replace(/\\"/g, "\"");
						var jsonObj2 = $.parseJSON('[' + jsonObj[0].cars + ']');
						for(var q = 0; q<jsonObj2.length;q++){
							if(jsonObj2[q].round === round){
								placeCar(new google.maps.LatLng(jsonObj2[q].lat,jsonObj2[q].lng));
							}		
						}
					}
		});
	}

	
	//Represents the actions taken place after clicking the go button
	function button(){
		if(grey === false){
			startCountdown();
		}
	}
	
	//Moves a car along its path at the correct speed
	function advance(car){
		if(car.assignTime < 10){
			car.assignTime++;
		}else{
			if(car.target.checked === true){
				assign(car, 0);
			}else{
				if(distanceToNearestRealJam(car.position) < 0.8){
					if(car.wait === 0){
						car.pointOnPath++;
						car.wait = 5;
					}else{
						car.wait--;
					}
				}else{
					car.pointOnPath++;		
				}
				if(car.pointOnPath<car.path.length){
					moveCar(car, car.path[car.pointOnPath]);
					checkCurrentLocation(car);
				}else{
					checkCircle(car);
				}
			}
		}
	}
	
	//Checks the jam that is the cars target in the case where that car has reached its target and updates the sidebar
	function checkCircle(car){
		car.target.setOptions({strokeColor:"#00FF00",fillColor:"#00FF00"});
		car.target.checked = true;
		if(car.target.real === false){
			car.fakeJamsChecked++;
			document.getElementById('fakesleft').innerHTML = 'FAKE JAMS LEFT: ' + (parseInt(document.getElementById('fakesleft').innerHTML[16])-1) + '/' + M;
		}
		car.jamsChecked++;
		document.getElementById('checked').innerHTML = 'JAMS CHECKED: ' + (parseInt(document.getElementById('checked').innerHTML.substring(14,16))+1) + '/' + jams.length;
	}
	
	//Assigns a new traffic jam to car while waiting for aTime time
	function assign(car, aTime){
		//car.assignTime = aTime;
		var closest;
		var closestDistance = Infinity;
		for(var o = 0; o<jams.length; o++){
			if(jams[o].checked === false && jams[o].assigned === allAssigned){
				var dist = Math.sqrt(Math.pow(car.position.lat()-jams[o].getCenter().lat(), 2)+Math.pow(car.position.lng()-jams[o].getCenter().lng(), 2));
				if(dist < closestDistance){
					closest = jams[o];
					closestDistance = dist;
				}
			}
		}
		if(closest !== undefined){
			if(car.target !== undefined){
				car.target.assigned = false;			
			}
			car.target = closest;
			directionsService.route({
					origin:car.getPosition(),
					destination:car.target.getCenter(),
					travelMode: google.maps.TravelMode.DRIVING
				}, function(result, status) {
					if (status == google.maps.DirectionsStatus.OK) {
						car.path = result.routes[0].overview_path;
						car.pointOnPath = 0;
						car.wait = 0;
						car.target.assigned = true;
					}
				}
			);
		}
	}

	//Split all jams at the beginning of the round between all cars
	function splitAssign(numOfCars){

		//assign all of the jams
		for(var j = 0; j<jams.length; j++){
			//get car with smallest route
			var car = cars[0];
			for(var n = 1; n<numOfCars; n++){
				if (car.totalDistance > cars[n].totalDistance){
					car = cars[n];
				}
			}
			//get closest jam to the car
			for(var o = 0; o<jams.length; o++){
				if(jams[o].checked === false && jams[o].assigned === false){
					var dist = Math.sqrt(Math.pow(car.position.lat()-jams[o].getCenter().lat(), 2)+Math.pow(car.position.lng()-jams[o].getCenter().lng(), 2));
					if(dist < closestDistance){
						closest = jams[o];
						closestDistance = dist;
					}	
				}
			}

			closest.assigned = true;
			car.totalDistance += closestDistance;
			car.jams.push(closest);
			
		}
		
		
		for(var n = 0; n<numOfCars; n++){

			car.target = cars[n].jams.pop();
			for(var x = 0; x<car.jams.length; x++){
				waypoints.push(car.jams[x].getCenter());
			}

			directionsService.route({
					origin:cars[n].getPosition(),
					destination:car.target.getCenter(),
					waypoints: waypoints, //an array of waypoints
            				optimizeWaypoints: true, //set to true if you want google to determine the shortest route or false to use the order specified.
					travelMode: google.maps.TravelMode.DRIVING
				}, function(result, status) {
					if (status == google.maps.DirectionsStatus.OK) {
						car.path = result.routes[0].overview_path;
						car.pointOnPath = 0;
						car.wait = 0;
						car.target.assigned = true;
					}
				}
			);
		}
	}
	
	//Returns if the state of the current game is a loss or not, this is determined by all fake jams being checked
	function checkIfLost(){
		for (var i = 0; i<jams.length; i++) {
			if (jams[i].real === false && jams[i].checked === false) {
				return false;
			}
		}
		return true;
	}
	
	//Returns the current score for the game, determined by spread and closeness to real jams over time
	function calculateScore(){
		for(var a = 0; a<jams.length; a++){
			if(jams[a].real === false && jams[a].checked === false){
				if(distanceToNearestRealJam(jams[a].center) < 0.8){
					score += distanceToNearestRealJam(jams[a].center) * sof;
				}else{
					score += sof;
				}
			}
		}
		return score;
	}
	
	//Stops the current timer and adds the jam and car data to their arrays
	function endRound(){
		clearInterval(timer);
	}
	
	//Starts a round
	function startCountdown(){
		timeGone = 0;
		allAssigned = false;	
		document.getElementById('fakesleft').style.color = '#000000';	
		document.getElementById('checked').style.color = '#000000';	
		document.getElementById('timeleft').style.color = '#000000';
		document.getElementById('checked').innerHTML = 'JAMS CHECKED: 0/' + jams.length;
		document.getElementById('fakesleft').innerHTML = 'FAKE JAMS LEFT: ' + M + '/' + M;
		document.getElementById('goButton').style.color = '#CCCCCC';	
		document.getElementById('goButton').style.backgroundColor = '#999999';
		grey = true;
		//for(var p = 0; p<M; p++){
		//	assign(cars[p], 0);
		//}
		splitAssign(p);


		timer = setInterval(function(){
			sof = spreadOfFakes();
			calculateScore();	
			document.getElementById('score').innerHTML = 'SCORE: ' + Math.round(score);
			document.getElementById('timeleft').innerHTML = Math.round((6000 - timeGone)/10) + ' SECONDS LEFT';
			if(checkIfLost() === true){
				endRound();
				score = Math.round(score);
				alert("Score: " + score);
			}else if(6000 - timeGone <= 0){
				endRound();
				//alert("Win!");
				round++;
				startRound(round);
			}
			for(var f = 0; f<cars.length;f++){
				advance(cars[f]);
			}
			var assignedList = 0;
			for(var s = 0; s<jams.length; s++){
				if(jams[s].real === false && jams[s].checked === false){
					jams[s].influence++;
				}
				if(jams[s].assigned === true || jams[s].checked === true){
					assignedList++;
				}
			}
			timeGone++;
			if(assignedList === jams.length){
				allAssigned = true;
			}
		}, 100);
	}

	//Places a fake jam at location
	function placeFakeJam(location) {
		if(fakeJamCount < M){
			var circle = new google.maps.Circle({
				center:location,
				draggable:false,
				radius:100,
				strokeColor:"#FF0000",
				strokeOpacity:0.8,
				strokeWeight:2,
				fillColor:"#FF0000",
				fillOpacity:0.4,
				map: map
			});
			fakeJamCount++;
			circle.real = false;
			circle.checked = false;
			circle.assigned = false;
			circle.influence = 0;
			jams.push(circle);
		}
	}
	
	//Checks if there is a jam at the car 's current location, if there is it checks it
	function checkCurrentLocation(car){
		var location = car.path[car.pointOnPath];
		for (var i = 0; i < jams.length; i++) {
			if(Math.round(jams[i].getCenter().lat() * 1000) === Math.round(location.lat() * 1000) && Math.round(jams[i].getCenter().lng() * 1000) === Math.round(location.lng() * 1000) && jams[i].checked === false){
				checkCircle(car);
			}
        }
	}
	
	//Clears all jams from the map
	function clearJams(){
		for (var i = 0; i < jams.length; i++) {
          jams[i].setMap(null);
        }
	}
	
	//Deletes all jams
	function deleteJams(){
		clearJams();
		fakeJamCount = 0;
		jams = [];
	}
	
	//Places a car at position
	function placeCar(position){
		var car = new google.maps.Marker({
			position: position,
			icon: './caricon.png',
			clickable: false,
			map: map
		});
		car.path = [];
		car.jams = [];
		car.totalDistance = 0;
		car.assignTime = 0;
		car.fakeJamsChecked = 0;
		car.jamsChecked = 0;
		car.startPosition = car.position;
		cars.push(car);
	}
	
	//Relocates car to position
	function moveCar(car, position){
		car.setPosition(position);
	}
	
	//Removes the cars from the map
	function clearCars(){
		for (var i = 0; i < cars.length; i++) {
			cars[i].setMap(null);
        }
	}
	
	//Removes all of the cars
	function deleteCars(){
		clearCars();
		cars = [];
	}
	
	//Adds a real traffic jam to the map
	function placeRealJam(location){
		
		var myOptions = {
		    content: "a",
		    boxStyle: {
		      border: "none",
		      textAlign: "center",
		      fontSize: "10pt",
		      width: "50px"
		    },
		    disableAutoPan: true,
		    pixelOffset: new google.maps.Size(-25, -5),
		    position: location,
		    closeBoxURL: "",
		    isHidden: false,
		    pane: "floatPane",
		    enableEventPropagation: true
		};

		var ibLabel = new InfoBox(myOptions);
		ibLabel.open(map);
		var circle = new google.maps.Circle({
			center:location,
			draggable:false,
			radius:100,
			strokeColor:"#000000",
			strokeOpacity:0.8,
			strokeWeight:2,
			fillColor:"#000000",
			fillOpacity:0.4,
			map: map
		});
		circle.real = true;
		circle.checked = false;
		circle.assigned = false;
		circle.text = myOptions;
		google.maps.event.addListener(circle, 'mouseover', function() {placeRadius(circle.center, 5);});
		jams.push(circle);
	}
	
	//Draws a target style radius around a given real jam at location, numberOfRings determines the size of this radius
	function placeRadius(location, numberOfRings){
		for(var i = numberOfRings;i>0;i--){
			var circle = new google.maps.Circle({
				center:location,
				draggable:false,
				radius:160*i,
				strokeColor:"#FF"+(i*(255/numberOfRings)).toString(16)+"00",
				strokeOpacity:0.8,
				strokeWeight:2,
				fillColor:"#FF"+(i*(255/numberOfRings)).toString(16)+"00",
				fillOpacity:0.4,
				map: map
			});
			google.maps.event.addListener(circle, 'mouseout', function() {removeRadius();});
			radius.push(circle);
		}
	}
	
	//Removes the target style radius from a real jam
	function removeRadius(location){
		for(var i = 0;i<radius.length;i++){
			radius[i].setMap(null);
		}
		radius = [];
	}
	
	//Returns the distance to the nearest real jam in km
	function distanceToNearestRealJam(location){
		var closestDistance = Infinity;
		for(var i = 0; i<jams.length; i++){
			if(jams[i].real === true){
				var dist = Math.sqrt(Math.pow(location.lat()-jams[i].getCenter().lat(), 2)+Math.pow(location.lng()-jams[i].getCenter().lng(), 2));
				if(dist < closestDistance){
					closestDistance = dist;
				}
			}
		}
		return closestDistance * 110.574;
	}
	
	//Calculates a value of the spread of all of the placed fake jams to influence the score
	function spreadOfFakes(){
		var bounds;
		for(var i = 0; i<jams.length; i++){
			if(jams[i].real === false){
				if(bounds === undefined){
					bounds = new google.maps.LatLngBounds(jams[i].getCenter(), jams[i].getCenter());
				}
				bounds = bounds.extend(new google.maps.LatLng(jams[i].getCenter().lat(), jams[i].getCenter().lng()));
			}
		}
		var northEast = bounds.getNorthEast();
		var southWest = bounds.getSouthWest();
		//spread is determined by the pythagorus distance of the diagonal corners
		var spread = Math.sqrt(Math.pow(southWest.lat()-northEast.lat(), 2) + Math.pow(southWest.lng()-northEast.lng(), 2)) * 10;
		//further away points just as bad as too close, fix this by removing some value
		if(spread > 1){
			spread = Math.sqrt(Math.pow((spread - 2), 2));
		//in the case of one jam the score didn't increase, quite hard to place >1 jam in the exact same place so this works
		}else if(spread === 0){
			spread = 1;
		}
		return spread;
	}
	
	google.maps.event.addDomListener(window, 'load', initialize);
    </script>
</head>

<body>
    <div id="map-canvas" style="float:left;"></div>
	<div class="sidebar">
        <div class="style7" id="score">SCORE: 0</div>
	    <div class="style7" id="checked">JAMS CHECKED:</div>
	    <div class="style7" id="fakesleft">FAKE JAMS LEFT:</div>
	    <div class="style7" id="timeleft">30 SECONDS LEFT</div>
        <button id="goButton" onclick="button()">
        		<h1>Go</h1>
        </button>
	</div>
</body>
</html>
